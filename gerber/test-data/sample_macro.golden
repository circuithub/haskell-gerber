[ G04 " Generated by UcamX v2020.12-210219 on 2021.4.8"
, G04 " Ucamco copyright"
, TF
    (GenerationSoftware
       GenerationSoftware
         { vendor = "Ucamco"
         , application = "UcamX v2020.12-210219"
         , version = Nothing
         })
, TF (CreationDate (CreationDate 2021-04-08 10:09:10 UTC))
, TF (FileFunction (Other "sample macro"))
, TF (FilePolarity Positive)
, FS
    PadLeading
    Format { integerPositions = 3 , decimalPositions = 6 }
    Format { integerPositions = 3 , decimalPositions = 6 }
, MO MM
, AM
    "BOXR"
    [ Comment " Rectangle with Rounded corners"
    , Comment " $1 width"
    , Comment " $2 height"
    , Comment " $3 corner radius"
    , Comment " $4 rotation angle"
    , Comment " Calculate half width, half height and corner diameter"
    , Variable
        5
        (Minus
           (Divide (VariableReference 1) (Decimal 2.0)) (VariableReference 3))
    , Variable
        6
        (Plus
           (UnaryMinus (VariableReference 3))
           (Divide (VariableReference 2) (Decimal 2.0)))
    , Variable 7 (Multiply (Decimal 2.0) (VariableReference 3))
    , Comment
        " Create two overlapping rectangles that omit the rounded corner areas"
    , Primitive
        (CenterLine
           CenterLineModifiers
             { centerLineExposure = Decimal 1.0
             , centerLineWidth = VariableReference 1
             , height = Minus (VariableReference 2) (VariableReference 7)
             , centerLineCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , centerLineRotation = VariableReference 4
             })
    , Primitive
        (CenterLine
           CenterLineModifiers
             { centerLineExposure = Decimal 1.0
             , centerLineWidth =
                 Minus (VariableReference 1) (VariableReference 7)
             , height = VariableReference 2
             , centerLineCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , centerLineRotation = VariableReference 4
             })
    , Comment " Add circles at the corners"
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 7
             , circleCenter = V2 (VariableReference 5) (VariableReference 6)
             , circleRotation = Just (VariableReference 4)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 7
             , circleCenter =
                 V2 (UnaryMinus (VariableReference 5)) (VariableReference 6)
             , circleRotation = Just (VariableReference 4)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 7
             , circleCenter =
                 V2
                   (UnaryMinus (VariableReference 5))
                   (UnaryMinus (VariableReference 6))
             , circleRotation = Just (VariableReference 4)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 7
             , circleCenter =
                 V2 (VariableReference 5) (UnaryMinus (VariableReference 6))
             , circleRotation = Just (VariableReference 4)
             })
    ]
, MacroAD 10 "BOXR" [ 0.1 , 5.0e-2 , 2.0e-2 , 0.0 ]
, MacroAD 11 "BOXR" [ 0.2 , 0.1 , 2.0e-2 , 10.0 ]
, MacroAD 12 "BOXR" [ 0.255 , 0.1 , 2.0e-2 , 30.0 ]
, MacroAD 13 "BOXR" [ 0.2775 , 0.1 , 2.0e-2 , 45.0 ]
, AM
    "BOXS"
    [ Comment " Rectangle with Straight cutoff corners"
    , Comment " $1 width"
    , Comment " $2 height"
    , Comment " $3 X cutoff value"
    , Comment " $4 Y cutoff value"
    , Comment " $5 rotation angle"
    , Comment " Create Outline describing the image"
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 1.0
             , vertices =
                 V2
                   (Minus
                      (VariableReference 3) (Divide (VariableReference 1) (Decimal 2.0)))
                   (Divide (VariableReference 2) (Decimal 2.0)) :|
                   [ V2
                       (Plus
                          (UnaryMinus (VariableReference 3))
                          (Divide (VariableReference 1) (Decimal 2.0)))
                       (Divide (VariableReference 2) (Decimal 2.0))
                   , V2
                       (Divide (VariableReference 1) (Decimal 2.0))
                       (Plus
                          (UnaryMinus (VariableReference 4))
                          (Divide (VariableReference 2) (Decimal 2.0)))
                   , V2
                       (Divide (VariableReference 1) (Decimal 2.0))
                       (Minus
                          (VariableReference 4) (Divide (VariableReference 2) (Decimal 2.0)))
                   , V2
                       (Plus
                          (UnaryMinus (VariableReference 3))
                          (Divide (VariableReference 1) (Decimal 2.0)))
                       (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                   , V2
                       (Minus
                          (VariableReference 3) (Divide (VariableReference 1) (Decimal 2.0)))
                       (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                   , V2
                       (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                       (Minus
                          (VariableReference 4) (Divide (VariableReference 2) (Decimal 2.0)))
                   , V2
                       (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                       (Plus
                          (UnaryMinus (VariableReference 4))
                          (Divide (VariableReference 2) (Decimal 2.0)))
                   , V2
                       (Minus
                          (VariableReference 3) (Divide (VariableReference 1) (Decimal 2.0)))
                       (Divide (VariableReference 2) (Decimal 2.0))
                   ]
             , outlineRotation = VariableReference 5
             })
    ]
, MacroAD 20 "BOXS" [ 0.1 , 5.0e-2 , 3.0e-2 , 2.0e-2 , 0.0 ]
, MacroAD 21 "BOXS" [ 0.2 , 0.1 , 3.0e-2 , 2.0e-2 , 10.0 ]
, MacroAD 22 "BOXS" [ 0.255 , 0.1 , 3.0e-2 , 2.0e-2 , 30.0 ]
, MacroAD 23 "BOXS" [ 0.2775 , 0.1 , 3.0e-2 , 2.0e-2 , 45.0 ]
, AM
    "BOXS2"
    [ Comment
        " Rectangle with Straight cutoff corners; X cutoff = Y cutoff x 3/2"
    , Comment " $1 width"
    , Comment " $2 height"
    , Comment " $3 Y cutoff value"
    , Comment " $4 X center"
    , Comment " $5 Y center"
    , Comment " $6 rotation angle"
    , Comment " Create Outline describing the image"
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 1.0
             , vertices =
                 V2
                   (Plus
                      (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                      (VariableReference 4))
                   (Plus
                      (Minus
                         (Divide (VariableReference 2) (Decimal 2.0)) (VariableReference 3))
                      (VariableReference 5)) :|
                   [ V2
                       (Plus
                          (Divide
                             (Parentheses
                                (Plus
                                   (UnaryMinus (VariableReference 1))
                                   (Multiply (Decimal 3.0) (VariableReference 3))))
                             (Decimal 2.0))
                          (VariableReference 4))
                       (Plus
                          (Divide (VariableReference 2) (Decimal 2.0)) (VariableReference 5))
                   , V2
                       (Plus
                          (Divide
                             (Parentheses
                                (Minus
                                   (VariableReference 1)
                                   (Multiply (Decimal 3.0) (VariableReference 3))))
                             (Decimal 2.0))
                          (VariableReference 4))
                       (Plus
                          (Divide (VariableReference 2) (Decimal 2.0)) (VariableReference 5))
                   , V2
                       (Plus
                          (Divide (VariableReference 1) (Decimal 2.0)) (VariableReference 4))
                       (Plus
                          (Minus
                             (Divide (VariableReference 2) (Decimal 2.0)) (VariableReference 3))
                          (VariableReference 5))
                   , V2
                       (Plus
                          (Divide (VariableReference 1) (Decimal 2.0)) (VariableReference 4))
                       (Plus
                          (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                          (Plus (VariableReference 3) (VariableReference 5)))
                   , V2
                       (Plus
                          (Minus
                             (Divide (VariableReference 1) (Decimal 2.0))
                             (Multiply
                                (Divide (Decimal 3.0) (Decimal 2.0)) (VariableReference 3)))
                          (VariableReference 4))
                       (Plus
                          (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                          (VariableReference 5))
                   , V2
                       (Plus
                          (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                          (Plus
                             (Multiply
                                (Divide (Decimal 3.0) (Decimal 2.0)) (VariableReference 3))
                             (VariableReference 4)))
                       (Plus
                          (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                          (VariableReference 5))
                   , V2
                       (Plus
                          (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                          (VariableReference 4))
                       (Plus
                          (Divide (UnaryMinus (VariableReference 2)) (Decimal 2.0))
                          (Plus (VariableReference 3) (VariableReference 5)))
                   , V2
                       (Plus
                          (Divide (UnaryMinus (VariableReference 1)) (Decimal 2.0))
                          (VariableReference 4))
                       (Plus
                          (Minus
                             (Divide (VariableReference 2) (Decimal 2.0)) (VariableReference 3))
                          (VariableReference 5))
                   ]
             , outlineRotation = VariableReference 6
             })
    ]
, MacroAD 30 "BOXS2" [ 0.1 , 5.0e-2 , 2.0e-2 , 0.0 , 0.0 , 0.0 ]
, MacroAD
    31 "BOXS2" [ 0.2 , 0.1 , 2.0e-2 , -2.0e-2 , -2.0e-2 , 10.0 ]
, MacroAD
    32 "BOXS2" [ 0.255 , 0.1 , 3.0e-2 , 3.0e-2 , -4.0e-2 , 30.0 ]
, MacroAD
    33 "BOXS2" [ 0.2775 , 0.1 , 4.0e-2 , 1.5e-2 , -5.0e-2 , 45.0 ]
, AM
    "THERS4T"
    [ Comment " Round Thermal with 4 gaps with Straight Stroke"
    , Comment " $1 outer diameter"
    , Comment " $2 inner diameter"
    , Comment " $3 gab thickness"
    , Comment " $4 rotation angle"
    , Comment " Thermal primitive"
    , Primitive
        (Thermal
           ThermalModifiers
             { thermalCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , outerDiameter = VariableReference 1
             , innerDiameter = VariableReference 2
             , gapThickness = VariableReference 3
             , thermalRotation = VariableReference 4
             })
    ]
, MacroAD 40 "THERS4T" [ 0.1 , 5.0e-2 , 2.0e-2 , 0.0 ]
, MacroAD 41 "THERS4T" [ 0.2 , 0.1 , 2.0e-2 , 10.0 ]
, MacroAD 42 "THERS4T" [ 0.25 , 0.2 , 6.0e-2 , 30.0 ]
, MacroAD 43 "THERS4T" [ 0.27 , 0.2 , 6.0e-2 , 45.0 ]
, AM
    "THERR4"
    [ Comment " Round Thermal with 4 gaps  with Round Stroke"
    , Comment " $1 outer diameter"
    , Comment " $2 inner diameter"
    , Comment
        " $3 sin of the angle between the vertical line and the center point of a rounded edge of the THErmal"
    , Comment
        "    value can be calculated by [gap + ($1-$2)/2] / [$2 + ($1-$2)/2 ]"
    , Comment " $4 cos of angle calculated by $3"
    , Comment " $5 rotation angle"
    , Comment " Calculate reference point for defining gap"
    , Variable 6 (Divide (VariableReference 1) (Decimal 2.0))
    , Variable
        7
        (Multiply
           (VariableReference 6)
           (Divide (VariableReference 3) (VariableReference 4)))
    , Comment " Calculate thickness"
    , Variable
        8
        (Divide
           (Parentheses (Minus (VariableReference 1) (VariableReference 2)))
           (Decimal 2.0))
    , Comment
        " Calculate radius of circle in middle between outer and inner diameter"
    , Variable
        9
        (Divide
           (Parentheses (Plus (VariableReference 8) (VariableReference 2)))
           (Decimal 2.0))
    , Comment " Create donut with outer and inner diameter"
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 1
             , circleCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , circleRotation = Just (Decimal 0.0)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 0.0
             , diameter = VariableReference 2
             , circleCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , circleRotation = Just (Decimal 0.0)
             })
    , Comment " Create 4 outlines creating gaps"
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 0.0
             , vertices =
                 V2 (Decimal 0.0) (Decimal 0.0) :|
                   [ V2
                       (VariableReference 7) (Divide (VariableReference 1) (Decimal 2.0))
                   , V2
                       (Minus (Decimal 0.0) (VariableReference 7))
                       (Divide (VariableReference 1) (Decimal 2.0))
                   , V2 (Decimal 0.0) (Decimal 0.0)
                   ]
             , outlineRotation = VariableReference 5
             })
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 0.0
             , vertices =
                 V2 (Decimal 0.0) (Decimal 0.0) :|
                   [ V2
                       (VariableReference 7) (Divide (VariableReference 1) (Decimal 2.0))
                   , V2
                       (Minus (Decimal 0.0) (VariableReference 7))
                       (Divide (VariableReference 1) (Decimal 2.0))
                   , V2 (Decimal 0.0) (Decimal 0.0)
                   ]
             , outlineRotation = Plus (Decimal 90.0) (VariableReference 5)
             })
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 0.0
             , vertices =
                 V2 (Decimal 0.0) (Decimal 0.0) :|
                   [ V2
                       (VariableReference 7) (Divide (VariableReference 1) (Decimal 2.0))
                   , V2
                       (Minus (Decimal 0.0) (VariableReference 7))
                       (Divide (VariableReference 1) (Decimal 2.0))
                   , V2 (Decimal 0.0) (Decimal 0.0)
                   ]
             , outlineRotation = Plus (Decimal 180.0) (VariableReference 5)
             })
    , Primitive
        (Outline
           OutlineModifiers
             { outlineExposure = Decimal 0.0
             , vertices =
                 V2 (Decimal 0.0) (Decimal 0.0) :|
                   [ V2
                       (VariableReference 7) (Divide (VariableReference 1) (Decimal 2.0))
                   , V2
                       (Minus (Decimal 0.0) (VariableReference 7))
                       (Divide (VariableReference 1) (Decimal 2.0))
                   , V2 (Decimal 0.0) (Decimal 0.0)
                   ]
             , outlineRotation = Plus (Decimal 270.0) (VariableReference 5)
             })
    , Comment " Add circles at the gaps"
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 3))
                   (Multiply (VariableReference 9) (VariableReference 4))
             , circleRotation = Just (VariableReference 5)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 3))
                   (Multiply (VariableReference 9) (VariableReference 4))
             , circleRotation = Just (Plus (Decimal 90.0) (VariableReference 5))
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 3))
                   (Multiply (VariableReference 9) (VariableReference 4))
             , circleRotation =
                 Just (Plus (Decimal 180.0) (VariableReference 5))
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 3))
                   (Multiply (VariableReference 9) (VariableReference 4))
             , circleRotation =
                 Just (Plus (Decimal 270.0) (VariableReference 5))
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 4))
                   (Multiply (VariableReference 9) (VariableReference 3))
             , circleRotation = Just (VariableReference 5)
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 4))
                   (Multiply (VariableReference 9) (VariableReference 3))
             , circleRotation = Just (Plus (Decimal 90.0) (VariableReference 5))
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 4))
                   (Multiply (VariableReference 9) (VariableReference 3))
             , circleRotation =
                 Just (Plus (Decimal 180.0) (VariableReference 5))
             })
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 1.0
             , diameter = VariableReference 8
             , circleCenter =
                 V2
                   (Multiply (VariableReference 9) (VariableReference 4))
                   (Multiply (VariableReference 9) (VariableReference 3))
             , circleRotation =
                 Just (Plus (Decimal 270.0) (VariableReference 5))
             })
    ]
, MacroAD 50 "THERR4" [ 0.1 , 5.0e-2 , 0.6 , 0.8 , 0.0 ]
, MacroAD 51 "THERR4" [ 0.2 , 0.1 , 0.4667 , 0.8844 , 10.0 ]
, MacroAD 52 "THERR4" [ 0.25 , 0.2 , 0.3778 , 0.9259 , 30.0 ]
, MacroAD 53 "THERR4" [ 0.27 , 0.2 , 0.4043 , 0.9146 , 45.0 ]
, AM
    "DONSS"
    [ Comment " Donut with Square Outside and Square Inside"
    , Comment " $1 outer dimension"
    , Comment " $2 hole dimension"
    , Comment " $3 rotation angle"
    , Comment " Create rectangle describing Outside"
    , Primitive
        (CenterLine
           CenterLineModifiers
             { centerLineExposure = Decimal 1.0
             , centerLineWidth = VariableReference 1
             , height = VariableReference 1
             , centerLineCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , centerLineRotation = VariableReference 3
             })
    , Comment " Create rectangle describing Inside"
    , Primitive
        (CenterLine
           CenterLineModifiers
             { centerLineExposure = Decimal 0.0
             , centerLineWidth = VariableReference 2
             , height = VariableReference 2
             , centerLineCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , centerLineRotation = VariableReference 3
             })
    ]
, MacroAD 60 "DONSS" [ 0.1 , 5.0e-2 , 0.0 ]
, MacroAD 61 "DONSS" [ 0.1 , 5.0e-2 , 10.0 ]
, MacroAD 62 "DONSS" [ 0.2 , 0.1 , 30.0 ]
, MacroAD 63 "DONSS" [ 0.2 , 0.15 , 45.0 ]
, G04
    " Donut with Square Outside and Round Inside, without rotation"
, AD
    70
    (Rectangle
       RectangleModifiers
         { width = 0.1
         , height = 0.1
         , rectangleHoleDiameter = Just 5.0e-2
         })
, AM
    "DONSR"
    [ Comment " Donut with Square Outside and Round Inside"
    , Comment " $1 outer dimension"
    , Comment " $2 hole diameter"
    , Comment " $3 rotation angle"
    , Comment " Create rectangle describing Outside"
    , Primitive
        (CenterLine
           CenterLineModifiers
             { centerLineExposure = Decimal 1.0
             , centerLineWidth = VariableReference 1
             , height = VariableReference 1
             , centerLineCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , centerLineRotation = VariableReference 3
             })
    , Comment " Create circle describing Inside"
    , Primitive
        (Circle
           CircleModifiers
             { circleExposure = Decimal 0.0
             , diameter = VariableReference 2
             , circleCenter = V2 (Decimal 0.0) (Decimal 0.0)
             , circleRotation = Just (Decimal 0.0)
             })
    ]
, MacroAD 71 "DONSR" [ 0.1 , 5.0e-2 , 10.0 ]
, MacroAD 72 "DONSR" [ 0.2 , 0.1 , 30.0 ]
, MacroAD 73 "DONSR" [ 0.2 , 0.15 , 45.0 ]
, G04 " Circle aperture creating background"
, AD
    100
    (Circle
       CircleModifiers
         { diameter = 1.0e-2 , circleHoleDiameter = Nothing })
, G04 " layer name: sample_macro"
, LP Dark
, G04 " Define background pattern"
, G36
, D02
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = True , digits = [ 2 , 5 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x = Nothing
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 5 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 4 , 5 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x = Nothing
      , y =
          Just
            EncodedDecimal
              { negative = True , digits = [ 2 , 5 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, G37
, SR
    StepRepeat
      { xRepeats = 1 , yRepeats = 90 , xStep = 0.0 , yStep = 3.0e-2 }
, D 100
, D02
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = True , digits = [ 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 8 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 4 , 3 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 8 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D02
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 8 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 4 , 3 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 8 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, SR_End
, SR
    StepRepeat
      { xRepeats = 54 , yRepeats = 1 , xStep = 3.0e-2 , yStep = 0.0 }
, D02
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = True , digits = [ 1 , 8 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 6 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = True , digits = [ 1 , 8 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 5 , 4 , 4 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D02
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 8 , 2 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 7 , 6 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D01
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 8 , 2 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 5 , 4 , 4 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, SR_End
, G04 " flashes, using dark polarity, with macro definitions"
, SR
    StepRepeat
      { xRepeats = 1 , yRepeats = 2 , xStep = 0.0 , yStep = 3.0 }
, D 10
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 11
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 12
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 13
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 20
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 21
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 22
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 23
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 30
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 6 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 31
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 32
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 33
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 40
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 41
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 42
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 43
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 50
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 51
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 52
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 53
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 60
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 9 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 61
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 62
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 63
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 70
, D03
    Movement
      { x = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 71
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 72
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 73
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, G04 " flashes, using clear polarity, with macro definitions"
, LP Clear
, D 10
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Just EncodedDecimal { negative = False , digits = [ 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 11
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 12
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 13
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 20
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 21
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 22
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 23
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 30
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 6 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 31
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 32
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 33
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 40
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 1 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 41
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 42
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 43
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 50
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 51
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 52
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 53
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 60
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 1 , 9 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 61
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 62
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 63
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 70
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 0 , 0 , 0 , 0 , 0 , 0 ] }
      , y =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , i = Nothing
      , j = Nothing
      }
, D 71
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 4 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 72
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 2 , 8 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, D 73
, D03
    Movement
      { x =
          Just
            EncodedDecimal
              { negative = False , digits = [ 3 , 2 , 0 , 0 , 0 , 0 , 0 ] }
      , y = Nothing
      , i = Nothing
      , j = Nothing
      }
, SR_End
, LP Dark
, TF (MD5 (MD5 "261C79F2176124CD8DF3B5AF47B4D8D6"))
, M02
]